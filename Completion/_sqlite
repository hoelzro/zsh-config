#compdef fxsql histdb sqlite sqlite3

local opt display_opt sqlite3 ign
local -a options output_modes exclusive dashes
local -A option_arity

# any option not present is assumed to have arity 0
option_arity=(
    [init]=1
    [separator]=1
    [nullvalue]=1
    [cmd]=1
    [lookaside]=2
    [maxsize]=1
    [mmap]=1
    [newline]=1
    [pagecache]=2
    [vfs]=1
    [1]=1
    [a]=1
    [append]=1
    [f]=1
    [file]=1
    [C]=1
    [directory]=1
)

# XXX could I use the _sqlite function provided by zsh?

function _complete_sqlite() {
    local db_file
    local opt

    if [[ $service = fxsql ]] ; then
        db_file=$HOME/.mozilla/firefox/*.default-release/places.sqlite
    elif [[ $service = histdb ]] ; then
        db_file=/home/rob/.zsh_history.db
    else
      # locate the database file argument
      for (( i = 2; i < CURRENT; i++ )) ; do
        case $words[i] in
          -*)
            opt=$words[i]
            opt=${opt#-}
            opt=${opt#-} # XXX if I could remove both leading dashes in one expression, that would be great!
            (( i += $option_arity[$opt] + 0 ))
            ;;
          *)
            db_file=${(Q)words[i]}
            break
            ;;
        esac
      done
    fi

    db_file=(${~db_file})
    db_file="file:$db_file[1]?immutable=1&mode=ro"

    compset -q
    local -a sql_words
    # the second argument to completion() isn't used, so let's omit it for now (but ${QIPREFIX:1} is what I was trying, and ${compstate[quote]} is handy)
    sql_words=( $(command sqlite3 -init /dev/null -batch $db_file "select candidate from completion('$PREFIX', '')" ) )
    compadd -M 'm:{[:lower:]}={[:upper:]}' $@ "${sql_words[@]}"
}

[[ $service = sqlite3 || $service = fxsql || $service = histdb ]] && sqlite3=true || unset sqlite3

# sqlite options require a single hyphen, but
# sqlite3 allows options with one or two
dashes=( '' )
(( $+sqlite3 )) && dashes+=( - )

options=(
  '(-init --init)'$^dashes'-init[startup file]:file containing SQLite commands:_files'
  $^dashes'-echo[echo commands]'
)

exclusive=( {,-}-{no,}header )
options+=(
  "($exclusive)"$^dashes'-header[turn headers on]'
  "($exclusive)"$^dashes'-noheader[turn headers off]'
)

output_modes=( column HTML line list )
(( $+sqlite3 )) && output_modes+=( ascii box csv json markdown table tabs quote )
exclusive=( $^dashes-${^output_modes:l} )
for display_opt in $output_modes ; do
  # finagle the description to match the way SQLite's -help formats them
  opt=$display_opt:l
  [[ $opt = $display_opt ]] && display_opt="'$display_opt'"
  options+=( "($exclusive)"$^dashes"-${opt}[set output mode to $display_opt]" )
done

(( $#words == 2 )) || ign='!'
options+=(
  $^dashes'-separator[set output field separator]:output field separator [|]'
  $^dashes'-nullvalue[set text string for null values]:string'
  "$ign(- :)"$^dashes'-version[show SQLite version]'
  "$ign(- :)"$^dashes'-help[show help]'
)

if [[ $service = fxsql || $service = histdb ]] ; then
  options+=(
    '1:SQL to run:_complete_sqlite'
  )
else
  options+=(
    '1:SQLite database file:_files'
    '2:SQL to run:_complete_sqlite'
  )
fi

(( $+sqlite3 )) && options+=(
  $^dashes'-A+[run .archive with arguments and exit]'
  $^dashes'-append[append the database to the end of the file]'
  $^dashes'-bail[stop after hitting an error]'
  $^dashes'-cmd[run specified command before reading stdin]:sqlite meta-command'
  $^dashes'-deserialize[open the database using sqlite3_deserialize()]'
  '(-*batch -*interactive)'$^dashes'-batch[force batch I/O]'
  '(-*batch -*interactive)'$^dashes'-interactive[force interactive I/O]'
  $^dashes'-lookaside[specify size and number of entries for lookaside memory]:size (bytes): :entries'
  $^dashes'-maxsize[specify maximum size for a --deserialize database]:size'
  $^dashes'-memtrace[trace all memory allocations and deallocations]'
  $^dashes'-mmap[set default mmap size]:size'
  $^dashes'-newline[set output row separator]:separator [\n]'
  $^dashes'-nofollow[refuse to open symbolic links to database files]'
  $^dashes'-pagecache[specify size and number of slots for page cache memory]:size (bytes): :slots'
  $^dashes'-readonly[open the database read-only]'
  $^dashes'-stats[print memory stats before each finalize]'
  $^dashes'-vfs[use specified default VFS]:vfs:(unix-dotfile unix-excl unix-none unix-namedsem)'
  $^dashes'-zip[open the file as a ZIP Archive]'
)

if [[ -n $words[(r)-A*] ]]; then
  options=( -s -w : '(-A --A)'${^dashes}-A "(-f --file -a --append)"${(M)options:#1:*}
    '(-v --verbose)'{-v,--verbose}'[print each filename as it is processed]'
    '(1 -a --append -f --file)'{-f+,--file=}'[specify archive file]:archive file:_files'
    '(1 -a --append -f --file)'{-a,--append=}'[operate on specified file opened using the apndvfs VFS]:archive file:_files'
    '(-C --directory)'{-C+,--directory=}'[change to specified directory to read/extract files]:directory:_directories'
    '(-n --dryrun)'{-n,--dryrun}'[show the SQL that would have occurred]'
    '*:file:_files'
    + '(commands)' \
    '(-c --create)'{-c,--create}'[create a new archive]'
    '(-u --update)'{-u,--update}'[update or add files to an existing archive]'
    '(-i --insert)'{-i,--insert}'[like -u but always add even if mtime unchanged]'
    '(-t --list)'{-t,--list}'[list contents of archive]'
    '(-x --extract)'{-x,--extract}'[extract files from archive]'
  )
fi

_arguments $options
